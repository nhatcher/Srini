/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var keith = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[5,10,28,36],$V4=[1,19],$V5=[1,20],$V6=[1,26],$V7=[1,24],$V8=[1,25],$V9=[1,22],$Va=[1,23],$Vb=[26,27],$Vc=[1,34],$Vd=[1,33],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[12,15,23,27,37,38,39,40,41],$Vj=[1,48],$Vk=[1,64],$Vl=[1,66],$Vm=[1,67],$Vn=[12,27,35],$Vo=[12,15,23,27,37],$Vp=[12,15,23,27,37,38,39],$Vq=[12,27],$Vr=[12,26,27,35],$Vs=[1,83],$Vt=[1,84];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,"function_declaration":7,"plot_command":8,"print_statement":9,"NAME":10,"(":11,")":12,"=":13,"expr":14,";":15,"value":16,"atomic_value":17,"array":18,"number":19,"STRING":20,"BOOLEAN":21,"NUMBER":22,"-":23,"[":24,"arrayList":25,"]":26,",":27,"PLOT":28,"plot_functions":29,"option_list":30,"function_list_member":31,"function_list":32,"option_list_member":33,"{":34,"}":35,"PRINT":36,"+":37,"*":38,"/":39,"^":40,"!":41,"expr_list":42,"DERIVATES":43,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"NAME",11:"(",12:")",13:"=",15:";",20:"STRING",21:"BOOLEAN",22:"NUMBER",23:"-",24:"[",26:"]",27:",",28:"PLOT",34:"{",35:"}",36:"PRINT",37:"+",38:"*",39:"/",40:"^",41:"!",43:"DERIVATES"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[7,7],[16,1],[16,1],[17,1],[17,1],[17,1],[19,1],[19,2],[18,3],[25,1],[25,3],[8,7],[8,11],[29,1],[29,3],[30,1],[30,3],[33,3],[32,1],[32,3],[31,1],[31,5],[9,5],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,2],[14,2],[14,3],[14,1],[14,1],[14,4],[14,5],[42,1],[42,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 16: case 22:
 this.$ = [$$[$0]];
break;
case 3:
 this.$ = $$[$0-1].concat($$[$0]);
break;
case 4: case 5: case 6:
 this.$ = $$[$0];
break;
case 7:
this.$ = {type: 'function_declaration', name: $$[$0-6], variable: $$[$0-4], expression: $$[$0-1]};
break;
case 8: case 9: case 10: case 37:
this.$ = $$[$0];
break;
case 11:
this.$ = $$[$0].slice(1, -1);
break;
case 12:
this.$ = $$[$0] === 'true';
break;
case 13:
this.$ = Number($$[$0]);
break;
case 14:
this.$ = -$$[$0];
break;
case 15: case 21: case 38:
this.$ = $$[$0-1];
break;
case 17: case 23:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 18:
 this.$ = {type:"plot_command", list:$$[$0-4], options: $$[$0-2]};
break;
case 19:
 this.$ = {type:"plot_command", list:$$[$0-8], options: [{key:'xrange', value:[$$[$0-5], $$[$0-3]]}]};
break;
case 20: case 25: case 43:
this.$ = [$$[$0]];
break;
case 24:
this.$ = {key:$$[$0-2], value:$$[$0]};
break;
case 26:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2]; 
break;
case 27:
this.$ = {value:$$[$0], options: {}};
break;
case 28:
this.$ = {value: $$[$0-3], options: $$[$0-1]};
break;
case 29:
this.$ = {type: 'print_statement', expr: $$[$0-2]};
break;
case 30:
this.$ = {type:'op', value: '+', children: [$$[$0-2], $$[$0]]};
break;
case 31:
this.$ = {type:'op', value: '-', children: [$$[$0-2], $$[$0]]};
break;
case 32:
this.$ = {type:'op', value: '*', children: [$$[$0-2], $$[$0]]};
break;
case 33:
this.$ = {type:'op', value: '/', children: [$$[$0-2], $$[$0]]};
break;
case 34:
this.$ = {type:'function', value: 'pow', children: [$$[$0-2], $$[$0]]};
break;
case 35:
this.$ = {type:'function', value:'gamma', children: [$$[$0-1]]};
break;
case 36:

            if($$[$0].type === 'unary') {
                throw new Error('Inavlid double unary');
            } else {
                this.$ = {type:'unary', value: '-', children: [$$[$0]]};
            }
        
break;
case 39:
this.$ = {type:'number', value:Number($$[$0])};
break;
case 40:
this.$ = {type:'variable', value:$$[$0]};
break;
case 41:
this.$ = {type:'function', value:$$[$0-3], children:$$[$0-1]};
break;
case 42:
this.$ = {type:'derivation', value:$$[$0-4], order:$$[$0-3].length, children:[$$[$0-1]]};
break;
case 44:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,28:$V1,36:$V2},{1:[3]},{5:[1,10],6:11,7:4,8:5,9:6,10:$V0,28:$V1,36:$V2},o($V3,[2,2]),o($V3,[2,4]),o($V3,[2,5]),o($V3,[2,6]),{11:[1,12]},{11:[1,13]},{11:[1,14]},{1:[2,1]},o($V3,[2,3]),{10:[1,15]},{10:$V4,24:[1,18],29:16,31:17,34:$V5},{10:$V6,11:$V7,14:21,22:$V8,23:$V9,37:$Va},{12:[1,27]},{27:[1,28]},{27:[2,20]},{10:$V4,31:30,32:29,34:$V5},o($Vb,[2,27]),{10:[1,31]},{12:[1,32],23:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh},{10:$V6,11:$V7,14:39,22:$V8,23:$V9,37:$Va},{10:$V6,11:$V7,14:40,22:$V8,23:$V9,37:$Va},{10:$V6,11:$V7,14:41,22:$V8,23:$V9,37:$Va},o($Vi,[2,39]),o($Vi,[2,40],{11:[1,42],43:[1,43]}),{13:[1,44]},{10:$Vj,24:[1,46],30:45,33:47},{26:[1,49],27:[1,50]},o($Vb,[2,25]),{27:[1,51]},{15:[1,52]},{10:$V6,11:$V7,14:53,22:$V8,23:$V9,37:$Va},{10:$V6,11:$V7,14:54,22:$V8,23:$V9,37:$Va},{10:$V6,11:$V7,14:55,22:$V8,23:$V9,37:$Va},{10:$V6,11:$V7,14:56,22:$V8,23:$V9,37:$Va},{10:$V6,11:$V7,14:57,22:$V8,23:$V9,37:$Va},o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),{12:[1,58],23:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh},{10:$V6,11:$V7,14:60,22:$V8,23:$V9,37:$Va,42:59},{11:[1,61]},{10:$V6,11:$V7,14:62,22:$V8,23:$V9,37:$Va},{12:[1,63],27:$Vk},{19:65,22:$Vl,23:$Vm},o($Vn,[2,22]),{13:[1,68]},{27:[2,21]},{10:$V4,31:69,34:$V5},{10:$Vj,30:70,33:47},o($V3,[2,29]),o($Vo,[2,30],{38:$Ve,39:$Vf,40:$Vg,41:$Vh}),o($Vo,[2,31],{38:$Ve,39:$Vf,40:$Vg,41:$Vh}),o($Vp,[2,32],{40:$Vg,41:$Vh}),o($Vp,[2,33],{40:$Vg,41:$Vh}),o([12,15,23,27,37,38,39,40],[2,34],{41:$Vh}),o($Vi,[2,38]),{12:[1,71],27:[1,72]},o($Vq,[2,43],{23:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh}),{10:$V6,11:$V7,14:73,22:$V8,23:$V9,37:$Va},{15:[1,74],23:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh},{15:[1,75]},{10:$Vj,33:76},{27:[1,77]},o($Vr,[2,13]),{22:[1,78]},{16:79,17:80,18:81,19:82,20:$Vs,21:$Vt,22:$Vl,23:$Vm,24:[1,85]},o($Vb,[2,26]),{27:$Vk,35:[1,86]},o($Vi,[2,41]),{10:$V6,11:$V7,14:87,22:$V8,23:$V9,37:$Va},{12:[1,88],23:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh},o($V3,[2,7]),o($V3,[2,18]),o($Vn,[2,23]),{19:89,22:$Vl,23:$Vm},o($Vr,[2,14]),o($Vn,[2,24]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),{17:91,19:82,20:$Vs,21:$Vt,22:$Vl,23:$Vm,25:90},o($Vb,[2,28]),o($Vq,[2,44],{23:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh}),o($Vi,[2,42]),{26:[1,92]},{26:[1,93],27:[1,94]},o($Vb,[2,16]),{12:[1,95]},o($Vn,[2,15]),{17:96,19:82,20:$Vs,21:$Vt,22:$Vl,23:$Vm},{15:[1,97]},o($Vb,[2,17]),o($V3,[2,19])],
defaultActions: {10:[2,1],17:[2,20],49:[2,21]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 22
break;
case 2:return 28
break;
case 3:return 36
break;
case 4:return 21
break;
case 5:return 10
break;
case 6:return 20
break;
case 7:return 38
break;
case 8:return 39
break;
case 9:return 23
break;
case 10:return 37
break;
case 11:return 40
break;
case 12:return 41
break;
case 13:return 11
break;
case 14:return 12
break;
case 15:return 24
break;
case 16:return 26
break;
case 17:return 34
break;
case 18:return 35
break;
case 19:return 27
break;
case 20:return ':'
break;
case 21:return 13
break;
case 22:return 15
break;
case 23:return 43
break;
case 24:return 5
break;
case 25:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:(?:[0-9]|[1-9][0-9]+)(?:\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\b)/,/^(?:Plot\b)/,/^(?:Print\b)/,/^(?:true|false\b)/,/^(?:[a-zA-Z][a-zA-Z0-9]*)/,/^(?:"[a-zA-Z#_\-0-9]+")/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:;)/,/^(?:[\']+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = keith;
exports.Parser = keith.Parser;
exports.parse = function () { return keith.parse.apply(keith, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}